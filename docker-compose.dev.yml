version: '3.8'

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${PG_NAME}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend_network

  redis:
    image: redis:7-alpine
    command: redis-server --bind 0.0.0.0
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 3
    networks:
      - backend_network

  app:
    build: .
    working_dir: /app
    volumes:
      - .:/app
    command: >
       sh -c "while ! nc -z db 5432; do sleep 1; done &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend_network

  celery:
    build: .
    command: celery -A FinanceBackend worker --loglevel=info
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - .:/app
    working_dir: /app
    depends_on:
      - redis
    networks:
      - backend_network
volumes:
  postgres_data:
  redis_data:

networks:
  backend_network:
    driver: bridge